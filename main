class APIExtension {
  constructor() {
    this.baseUrl = "";
  }

  getInfo() {
    return {
      id: "apiExtension",
      name: "API Extension",
      blocks: [
        {
          opcode: "setBaseUrl",
          blockType: Scratch.BlockType.COMMAND,
          text: "set base URL to [URL]",
          arguments: {
            URL: { type: Scratch.ArgumentType.STRING, defaultValue: "https://api.example.com" }
          }
        },
        {
          opcode: "getRequest",
          blockType: Scratch.BlockType.REPORTER,
          text: "GET from [ENDPOINT]",
          arguments: {
            ENDPOINT: { type: Scratch.ArgumentType.STRING, defaultValue: "/data" }
          }
        },
        {
          opcode: "postRequest",
          blockType: Scratch.BlockType.REPORTER,
          text: "POST to [ENDPOINT] with [DATA]",
          arguments: {
            ENDPOINT: { type: Scratch.ArgumentType.STRING, defaultValue: "/submit" },
            DATA: { type: Scratch.ArgumentType.STRING, defaultValue: "{\"key\": \"value\"}" }
          }
        }
      ]
    };
  }

  setBaseUrl(args) {
    this.baseUrl = args.URL;
  }

  getRequest(args) {
    return fetch(`${this.baseUrl}${args.ENDPOINT}`)
      .then(response => response.text())
      .catch(error => `Error: ${error}`);
  }

  postRequest(args) {
    return fetch(`${this.baseUrl}${args.ENDPOINT}`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: args.DATA
    })
      .then(response => response.text())
      .catch(error => `Error: ${error}`);
  }
}

Scratch.extensions.register(new APIExtension());

class GeminiAPIExtension {
  constructor() {
    this.apiKey = "AIzaSyDVo60_O_B5l_AxZt0GiwxmtBRn7tGKOc4";
    this.apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${this.apiKey}`;
  }

  getInfo() {
    return {
      id: "geminiAPIExtension",
      name: "Gemini API Extension",
      blocks: [
        {
          opcode: "talkToGemini",
          blockType: Scratch.BlockType.REPORTER,
          text: "send [MESSAGE] to Gemini",
          arguments: {
            MESSAGE: {
              type: Scratch.ArgumentType.STRING,
              defaultValue: "test"
            }
          }
        }
      ]
    };
  }

  async talkToGemini(args) {
    const message = args.MESSAGE;
    const payload = {
      contents: [{ parts: [{ text: message }] }]
    };

    const headers = {
      "Content-Type": "application/json"
    };

    try {
      const response = await fetch(this.apiUrl, {
        method: "POST",
        headers: headers,
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        throw new Error(`Error: ${response.statusText}`);
      }

      const responseData = await response.json();
      return responseData.candidates?.[0]?.content?.parts?.[0]?.text || "No response from Gemini.";
    } catch (error) {
      return `Error: ${error.message}`;
    }
  }
}

Scratch.extensions.register(new GeminiAPIExtension());



